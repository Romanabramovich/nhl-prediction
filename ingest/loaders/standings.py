# ingest/loaders/standings.py
from ingest.clients.nhl import NHLClient
from database import get_database_engine
from sqlalchemy import text

ABBREV_TO_ID = {
    "NJD": 1,
    "NYI": 2,
    "NYR": 3,
    "PHI": 4,
    "PIT": 5,
    "BOS": 6,
    "BUF": 7,
    "MTL": 8,
    "OTT": 9,
    "TOR": 10,
    "ATL": 11, # atlanta thrashers
    "CAR": 12,
    "FLA": 13,
    "TBL": 14,
    "WSH": 15,
    "CHI": 16,
    "DET": 17,
    "NSH": 18,
    "STL": 19,
    "CGY": 20,
    "COL": 21,
    "EDM": 22,
    "VAN": 23,
    "ANA": 24,
    "DAL": 25,
    "LAK": 26,
    "SJS": 28,
    "CBJ": 29,
    "MIN": 30,
    "WPG": 52,
    "ARI": 53,
    "VGK": 54,
    "SEA": 55,
    "UTA": 59, #utah hockey club
}


def upsert_standings_on_date(date: str, engine = None):
    # /v1/standings/YYYY-MM-DD

    if engine is None:
        engine = get_database_engine()

    client = NHLClient()
    payload = client.get(f"/v1/standings/{date}")
    rows = []
    
    for team in payload.get("standings"):    
        rows.append(
            {
                "date": date,
                "team_id": ABBREV_TO_ID[team["teamAbbrev"]["default"]],
                "team_name": team["teamName"]["default"], 
                "team_abbrev" : team["teamAbbrev"]["default"], 
                "conference": team["conferenceName"],
                "division": team["divisionName"],
                "games_played": team.get("gamesPlayed", 0),
                "points": team.get("points", 0),
                "wins": team.get("wins", 0),
                "win_pct": team.get("winPctg", 0),
                "losses": team.get("losses", 0), 
                "home_games_played": team.get("homeGamesPlayed", 0),
                "home_goal_diff": team.get("homeGoalDifferential", 0),
                "home_goal_for": team.get("homeGoalsFor", 0),
                "home_goal_against": team.get("homeGoalsAgainst", 0),
                "home_losses": team.get("homeLosses", 0),
                "home_ot_losses": team.get("homeOtLosses", 0),
                "away_games_played": team.get("roadGamesPlayed", 0),
                "goals_for": team.get("goalFor", 0), 
                        "goals_for_pct": team.get("goalsForPctg", 0),
                        "goals_against": team.get("goalAgainst", 0),
                        "goals_against_pct": team.get("goalsAgainstPctg", 0),
                        "goal_diff": team.get("goalDifferential", (team.get("goalFor", 0) - team.get("goalAgainst", 0))),
                        "goal_diff_pct": team.get("goalDifferentialPctg", 0),
                        "ot_losses": team.get("otLosses", 0),
                        "regulation_wins": team.get("regulationWins", 0),
                        "regulation_plus_ot_wins": team.get("regulationPlusOtWins", 0),
                        "point_pct": team.get("pointPctg", 0),
                        "regulation_win_pct": team.get("regulationWinPctg", 0),
                        "regulation_plus_ot_win_pct": team.get("regulationPlusOtWinPctg", 0),
                        "shootout_losses": team.get("shootoutLosses", 0),
                        "shootout_wins": team.get("shootoutWins", 0),
                        "ties": team.get("ties", 0),
                "home_wins": team.get("homeWins", 0),
                "home_ties": team.get("homeTies", 0),
                "home_points": team.get("homePoints", 0),
                "home_regulation_wins": team.get("homeRegulationWins", 0),
                "home_regulation_plus_ot_wins": team.get("homeRegulationPlusOtWins", 0),
                "road_wins": team.get("roadWins", 0),
                "road_losses": team.get("roadLosses", 0),
                "road_ot_losses": team.get("roadOtLosses", 0),
                "road_ties": team.get("roadTies", 0),
                "road_points": team.get("roadPoints", 0),
                "road_goals_for": team.get("roadGoalsFor", 0),
                "road_goals_against": team.get("roadGoalsAgainst", 0),
                "road_goal_diff": team.get("roadGoalDifferential", 0),
                "road_regulation_wins": team.get("roadRegulationWins", 0),
                "road_regulation_plus_ot_wins": team.get("roadRegulationPlusOtWins", 0),
                "l10_games_played": team.get("l10GamesPlayed", 0),
                "l10_wins": team.get("l10Wins", 0),
                "l10_losses": team.get("l10Losses", 0),
                "l10_ot_losses": team.get("l10OtLosses", 0),
                "l10_ties": team.get("l10Ties", 0),
                "l10_points": team.get("l10Points", 0),
                "l10_goals_for": team.get("l10GoalsFor", 0),
                "l10_goals_against": team.get("l10GoalsAgainst", 0),
                "l10_goal_diff": team.get("l10GoalDifferential", 0),
                "l10_regulation_wins": team.get("l10RegulationWins", 0),
                "l10_regulation_plus_ot_wins": team.get("l10RegulationPlusOtWins", 0),
                "streak_code": team.get("streakCode", ""),
                "streak_count": team.get("streakCount", 0),
                "league_sequence": team.get("leagueSequence", 0),
                "league_home_sequence": team.get("leagueHomeSequence", 0),
                "league_road_sequence": team.get("leagueRoadSequence", 0),
                "league_l10_sequence": team.get("leagueL10Sequence", 0),
                "conference_sequence": team.get("conferenceSequence", 0),
                "conference_home_sequence": team.get("conferenceHomeSequence", 0),
                "conference_road_sequence": team.get("conferenceRoadSequence", 0),
                "conference_l10_sequence": team.get("conferenceL10Sequence", 0),
                "division_sequence": team.get("divisionSequence", 0),
                "division_home_sequence": team.get("divisionHomeSequence", 0),
                "division_road_sequence": team.get("divisionRoadSequence", 0),
                "division_l10_sequence": team.get("divisionL10Sequence", 0),
                "wildcard_sequence": team.get("wildcardSequence", 0),
                "waivers_sequence": team.get("waiversSequence", 0)
            }
        )
        
    with engine.begin() as conn:
        for r in rows:
            conn.execute(text(
                """
                        INSERT INTO team_stats(
                            date, team_id, team_name, team_abbrev, conference, division, games_played, points, wins, win_pct, losses,
                            home_games_played, home_goal_diff, home_goal_for, home_goal_against, home_losses, home_ot_losses,
                            away_games_played, goals_for, goals_for_pct, goals_against, goals_against_pct, goal_diff, goal_diff_pct,
                            ot_losses, regulation_wins, regulation_plus_ot_wins, point_pct, regulation_win_pct, regulation_plus_ot_win_pct,
                            shootout_losses, shootout_wins, ties,
                            home_wins, home_ties, home_points, home_regulation_wins, home_regulation_plus_ot_wins,
                            road_wins, road_losses, road_ot_losses, road_ties, road_points, road_goals_for, road_goals_against,
                            road_goal_diff, road_regulation_wins, road_regulation_plus_ot_wins,
                            l10_games_played, l10_wins, l10_losses, l10_ot_losses, l10_ties, l10_points, l10_goals_for,
                            l10_goals_against, l10_goal_diff, l10_regulation_wins, l10_regulation_plus_ot_wins,
                            streak_code, streak_count, league_sequence, league_home_sequence, league_road_sequence, league_l10_sequence,
                            conference_sequence, conference_home_sequence, conference_road_sequence, conference_l10_sequence,
                            division_sequence, division_home_sequence, division_road_sequence, division_l10_sequence,
                            wildcard_sequence, waivers_sequence
                        )
                VALUES(
                    :date, :team_id, :team_name, :team_abbrev, :conference, :division, :games_played, :points, :wins, :win_pct, :losses,
                    :home_games_played, :home_goal_diff, :home_goal_for, :home_goal_against, :home_losses, :home_ot_losses,
                    :away_games_played, :goals_for, :goals_for_pct, :goals_against, :goals_against_pct, :goal_diff, :goal_diff_pct,
                    :ot_losses, :regulation_wins, :regulation_plus_ot_wins, :point_pct, :regulation_win_pct, :regulation_plus_ot_win_pct,
                    :shootout_losses, :shootout_wins, :ties,
                    :home_wins, :home_ties, :home_points, :home_regulation_wins, :home_regulation_plus_ot_wins,
                    :road_wins, :road_losses, :road_ot_losses, :road_ties, :road_points, :road_goals_for, :road_goals_against,
                    :road_goal_diff, :road_regulation_wins, :road_regulation_plus_ot_wins,
                    :l10_games_played, :l10_wins, :l10_losses, :l10_ot_losses, :l10_ties, :l10_points, :l10_goals_for,
                    :l10_goals_against, :l10_goal_diff, :l10_regulation_wins, :l10_regulation_plus_ot_wins,
                    :streak_code, :streak_count, :league_sequence, :league_home_sequence, :league_road_sequence, :league_l10_sequence,
                    :conference_sequence, :conference_home_sequence, :conference_road_sequence, :conference_l10_sequence,
                    :division_sequence, :division_home_sequence, :division_road_sequence, :division_l10_sequence,
                    :wildcard_sequence, :waivers_sequence
                )
                ON CONFLICT (team_id, date) DO UPDATE
                SET team_name = EXCLUDED.team_name,
                    team_abbrev = EXCLUDED.team_abbrev,
                    conference = EXCLUDED.conference,
                    division = EXCLUDED.division,
                    games_played = EXCLUDED.games_played,
                    points = EXCLUDED.points,
                    wins = EXCLUDED.wins,
                    win_pct = EXCLUDED.win_pct,
                    losses = EXCLUDED.losses,
                    home_games_played = EXCLUDED.home_games_played,
                    home_goal_diff = EXCLUDED.home_goal_diff,
                    home_goal_for = EXCLUDED.home_goal_for,
                    home_goal_against = EXCLUDED.home_goal_against,
                    home_losses = EXCLUDED.home_losses,
                    home_ot_losses = EXCLUDED.home_ot_losses,
                    away_games_played = EXCLUDED.away_games_played,
                    goals_for = EXCLUDED.goals_for,
                    goals_for_pct = EXCLUDED.goals_for_pct,
                    goals_against = EXCLUDED.goals_against,
                    goals_against_pct = EXCLUDED.goals_against_pct,
                    goal_diff = EXCLUDED.goal_diff,
                    goal_diff_pct = EXCLUDED.goal_diff_pct,
                    ot_losses = EXCLUDED.ot_losses,
                    regulation_wins = EXCLUDED.regulation_wins,
                    regulation_plus_ot_wins = EXCLUDED.regulation_plus_ot_wins,
                    point_pct = EXCLUDED.point_pct,
                    regulation_win_pct = EXCLUDED.regulation_win_pct,
                    regulation_plus_ot_win_pct = EXCLUDED.regulation_plus_ot_win_pct,
                    shootout_losses = EXCLUDED.shootout_losses,
                    shootout_wins = EXCLUDED.shootout_wins,
                    ties = EXCLUDED.ties,
                    home_wins = EXCLUDED.home_wins,
                    home_ties = EXCLUDED.home_ties,
                    home_points = EXCLUDED.home_points,
                    home_regulation_wins = EXCLUDED.home_regulation_wins,
                    home_regulation_plus_ot_wins = EXCLUDED.home_regulation_plus_ot_wins,
                    road_wins = EXCLUDED.road_wins,
                    road_losses = EXCLUDED.road_losses,
                    road_ot_losses = EXCLUDED.road_ot_losses,
                    road_ties = EXCLUDED.road_ties,
                    road_points = EXCLUDED.road_points,
                    road_goals_for = EXCLUDED.road_goals_for,
                    road_goals_against = EXCLUDED.road_goals_against,
                    road_goal_diff = EXCLUDED.road_goal_diff,
                    road_regulation_wins = EXCLUDED.road_regulation_wins,
                    road_regulation_plus_ot_wins = EXCLUDED.road_regulation_plus_ot_wins,
                    l10_games_played = EXCLUDED.l10_games_played,
                    l10_wins = EXCLUDED.l10_wins,
                    l10_losses = EXCLUDED.l10_losses,
                    l10_ot_losses = EXCLUDED.l10_ot_losses,
                    l10_ties = EXCLUDED.l10_ties,
                    l10_points = EXCLUDED.l10_points,
                    l10_goals_for = EXCLUDED.l10_goals_for,
                    l10_goals_against = EXCLUDED.l10_goals_against,
                    l10_goal_diff = EXCLUDED.l10_goal_diff,
                    l10_regulation_wins = EXCLUDED.l10_regulation_wins,
                    l10_regulation_plus_ot_wins = EXCLUDED.l10_regulation_plus_ot_wins,
                    streak_code = EXCLUDED.streak_code,
                    streak_count = EXCLUDED.streak_count,
                    league_sequence = EXCLUDED.league_sequence,
                    league_home_sequence = EXCLUDED.league_home_sequence,
                    league_road_sequence = EXCLUDED.league_road_sequence,
                    league_l10_sequence = EXCLUDED.league_l10_sequence,
                    conference_sequence = EXCLUDED.conference_sequence,
                    conference_home_sequence = EXCLUDED.conference_home_sequence,
                    conference_road_sequence = EXCLUDED.conference_road_sequence,
                    conference_l10_sequence = EXCLUDED.conference_l10_sequence,
                    division_sequence = EXCLUDED.division_sequence,
                    division_home_sequence = EXCLUDED.division_home_sequence,
                    division_road_sequence = EXCLUDED.division_road_sequence,
                    division_l10_sequence = EXCLUDED.division_l10_sequence,
                    wildcard_sequence = EXCLUDED.wildcard_sequence,
                    waivers_sequence = EXCLUDED.waivers_sequence
                """
            ), r)

